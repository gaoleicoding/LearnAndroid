apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
ext.getCNName = {
    HashMap<String, String> map = new HashMap<>();
    map.put("xiaomi", "xiaomi.apk");
    map.put("oppo", "oppo.apk");
    map.put("Tencent", "Tencent.apk");
    map.put("huawei", "huawei.apk");
    map.put("Qihoo", "360.apk");
    return map;
}

android {
    signingConfigs {
        release {
            keyAlias 'mvpmodel'
            keyPassword 'android1201'
            storeFile file('mvpmodel.jks')
            storePassword 'android1201'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.android.learn"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }
    buildTypes {
        debug {
            minifyEnabled false //是否启用Proguard
            shrinkResources false //是否清理无用资源,依赖于minifyEnabled
            zipAlignEnabled false //是否启用zipAlign压缩
            signingConfig signingConfigs.release
        }
        //执行lint检查，有任何的错误或者警告提示，都会终止构建
//        lintOptions {
//            abortOnError false
//        }
        release {
            minifyEnabled true //是否启用Proguard
            shrinkResources true //是否清理无用资源,依赖于minifyEnabled
            zipAlignEnabled true //是否启用zipAlign压缩
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            //def date = new Date().format('yy-MM-dd-HH');
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为XuetangXRelease-3.1.0(3100)_Baidu-百度.apk
                        def channel = variant.productFlavors[0].name
                        def releaseFileName = "build/outputs/LearnAndroid－${variant.buildType.name}-V${variant.versionName}(${variant.versionCode})_${getCNName().get(channel)}"
                        outputFileName = releaseFileName
                    }
                }
            }
        }

    }

    flavorDimensions("dimension1")
    productFlavors {
        xiaomi {
            dimension "dimension1"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi", SPAM_VALUE: "xiaomi"];
        }


        Tencent {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Tencent", SPAM_VALUE: "Tencent"];
            dimension "dimension1"
        }

        huawei {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei", SPAM_VALUE: "huawei"];
            dimension "dimension1"
        }
        Qihoo {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Qihoo", SPAM_VALUE: "Qihoo"];
            dimension "dimension1"
        }


        oppo {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "oppo", SPAM_VALUE: "oppo"];
            dimension "dimension1"
        }

    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    kapt rootProject.ext.dependencies["butterknife-compiler"]
    api project(':basemodule')
}
